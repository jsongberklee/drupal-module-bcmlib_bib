<?php 
// include local functions
require_once('includes/local-functions.inc');
/**
 * Implements hook_field_info().
 */
function bcmlib_bib_field_info() {  
  // Returning array. 
  return array(  
    // Which is called bcmlib_bib.
    'bcmlib_bib' => array(  
      // Name of our type will be 'Te(x/s)t field'.
      'label' => t('BIB text field'),  
      // Description of our type.
      'description' => t('BIB text field'),  
      // Standart widget that will be dispalyed at once.
      // after that we choose field type 
      'default_widget' => 'bcmlib_bib_widget',                        
      // Standart that will be dispayed right after we choose field type.
      'default_formatter' => 'bcmlib_bib_formatter',  
    ), 
  ); 
} 
/**
 * Implements hook_field_widget_info().
 */
function bcmlib_bib_field_widget_info() {  
  // Returning massive.
  return array(   
    // With bcmlib_bib name.
    'bcmlib_bib' => array(  
      // Our widget will be named bcmlib_bib label.
      'label' => t('bcmlib_bib label'),  
      // Our widget will work with a field in DB under the name bcmlib_bib.
      'field types' => array('bcmlib_bib'),  
    ), 
  ); 
} 
/**
 * Implements hook_field_widget_form().
 */
function bcmlib_bib_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Setting switch into parameters that wll work widget types that are in module.
  switch ($instance['widget']['type']) {  
      // If parameter case is 'bcmlib_bib'.
      case 'bcmlib_bib':  
        // Then we assign to bcmlib_bib element an array.
        // With the following values.
        $element['bcmlib_bib'] = array(  
            // Element type 'bcmlib_bibield'.
            '#type' => 'textfield',  
            // Widget description is given in element settings.
            '#description' => $element['#description'], 
            // Our widget will have standart value bcmlib_bibield.
            '#default_value' => t(isset($items[$delta]['bcmlib_bib']) ? $items[$delta]['bcmlib_bib'] : ''),  
            // If element is required it will be indicated in settings of the very element.
            '#required' => $element['#required'],  
            // Element location â€“  
            // If it's indicated, value should be used, if not, value is 0.
            '#weight' => isset($element['#weight']) ? $element['#weight'] : 0, 
            // Line that we'll need for the output.
            '#delta' => $delta,  
        ); 
      break;
  } 
  return $element;
}
/**
 * Implements hook_field_is_empty().
 */
function bcmlib_bib_field_is_empty($item, $field) { 
   // If there's nothing in $item['bcmlib_bib'].
   if (empty($item['bcmlib_bib'])) { 
        // Then we return 1, i.e. we say to Drupal that everything is fine).
        return TRUE;  
        // And if it's empty, nothing will be displayed.
   } 
}

/**
 * Implements hook_field_formatter_info().
 */
function bcmlib_bib_field_formatter_info() {  
  // Returning array.
  return array(   
      // Name of our format for code.
      'bcmlib_bib_formatter' => array(  
          // Dispalyed name of format.
          'label' => t('BIB text field formatter'),  
          // Field in DB with which our format will work.
          'field types' => array('bcmlib_bib'),  
      ), 
  ); 
}
/**
 * Implements hook_field_formatter_view().
 */
function bcmlib_bib_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'bcmlib_bib_formatter':
      foreach ($items as $delta => $item) {
		//dsm($item['bcmlib_bib']);
        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
          // See theme_html_tag().
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => 'bib-eachitem-wrapper clearfix',
          ),
          //'#value' => t('Bib number -> @bib', array('@bib' => $item['bcmlib_bib'])),
          '#value' => _theme_eg_item(_get_eg_item_marcxml($item['bcmlib_bib'])),
          //'#value' => _get_eg_item($item['bcmlib_bib']),
        );
      }
      break;
  }

  return $element;
}

/********************************************************************************************************************
* ADMIN VIEW
*********************************************************************************************************************/
// include local functions
require_once('includes/bcmlib_bib_admin.inc');

/**
* Implementation of hook_menu().
*/
function bcmlib_bib_menu() {
	$items['acquisition/admin'] = array(
	      'title' => 'Recent acquisitions admin',
	      'type'=> MENU_CALLBACK, 
	      'page callback' => '_acquisitions_page_callback',
	      //'page arguments' => array('bcmlib_bib_acquisition_admin');
	      'access callback' => TRUE,
	      '#required' => TRUE,
	      'access arguments' => array('access content'),
	      'file' => 'includes/bcmlib_bib_admin.inc',
	      'weight' => 1,
	    );
	    
	return $items;
}

function _acquisitions_page_callback() {
    return drupal_get_form('bcmlib_bib_acquisitons_admin');
}
function bcmlib_bib_acquisitons_admin($form, &$form_state){
	// Display page 2 if $form_state['page_num'] == 2
	if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
		return bcmlib_bib_acquisitons_admin2($form, $form_state);
	}
	// Otherwise we build page 1.
	$form_state['page_num'] = 1;

	
	$form['numOfItems'] = array(
		'#type' => 'select',
		'#title' => t('Number of items'),
		'#value' => $defaultNumOfItems,
		'#options' => array(
			25 => t('Recent 25 items'),
			50 => t('Recent 50 items'),
			75 => t('Recent 75 items'),
			100 => t('within 100 items'),
			250 => t('within 250 items'),
			),
		'#value' => isset($form_state['input']['numOfItems']) ? $form_state['input']['numOfItems'] : 50,
		'#description' => t('Select amount of recent items to be displayed.'),
	);
	$form['next'] = array(
		'#type' => 'submit',
		'#value' => 'Import records',
		'#submit' => array('bcmlib_bib_acquisitons_admin_next'),
		'#validate' => array('bcmlib_bib_acquisitons_admin_validate_next'),
	);

	if($form_state['input']['numOfItems']){
		//dsm($form_state['input']['numOfItems']);
	} 
  return $form;
}
/**
 * Validate handler for the Import items on first page.
 */
function bcmlib_bib_acquisitons_admin_validate_next($form, &$form_state) {
  $numOfItems = $form_state['input']['numOfItems'];
  if (!$numOfItems) {
    form_set_error('numOfItems', t('Please select the number of items'));
  }
}

/**
 * Submit handler for bcmlib_bib_acquisitons_admin() next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function bcmlib_bib_acquisitons_admin_next($form, &$form_state) {

  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // and we tell FAPI to rebuild the form.
  //$form_state['page_values'][1] = $form_state['input'];
  //if (!empty($form_state['page_values'][2])) {
  // $form_state['values'] = $form_state['page_values'][2];
  //}

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page_num'] = 2;
  $form_state['rebuild'] = TRUE;
  
}
function _populate_items(&$form_state){
	//dsm($form_state);
	//dsm($form_state['values']['numOfItems']);
	//return _get_feed_items(_get_feed_items_url($form_state['values']['numOfItems']));
	return _get_feed_items(_get_feed_items_url(10));
	
}

function bcmlib_bib_acquisitons_admin2($form, &$form_state){
	masonry_apply('#masonryjsong', array('masonry_item_selector'=>'.bib-eachitem-wrapper', 'masonry_column_width'=> 20, 'masonry_column_width_units'=>'%', 'masonry_resizable'=>true, 'masonry_animated'=>true, 'masonry_images_first'=>true, 'masonry_fit_width'=>true, 'masonry_gutter_width'=>0));
	$bibItems = _populate_items($form_state);
	
	$renderedHtml = '<div id="masonryjsong" class="field-name-field-bib">';
	foreach($bibItems as $bibItem){
		//dsm($bibItem);
	  $renderedHtml .= '<div class="bib-eachitem-wrapper clearfix">'._theme_eg_admin_item($bibItem).'</div>';	
	}
	
	$renderedHtml .= '</div>';

	
	$form['markup_html'] = array(
		'#markup' => $renderedHtml,	
	);

	
	$form['description'] = array(
		'#type' => 'item',
		'#title' => t('Item selection checkboxs'),
	);
	$form['bib_number'] = array
    (
    '#type' => 'checkbox_bib',
    '#columns' => 3,
    '#options' => array
      (
      1 => 'a',
      2 => 'b',
      3 => 'c',
      4 => 'a',
      5 => 'b',
      6 => 'c',
      7 => 'a',
      8 => 'b',
      9 => 'c',
      10 => 'a',
      11 => 'b',
      12 => 'c',

      ),
    );

    
    
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Add Items to the list',
	    '#submit' => array('bcmlib_bib_acquisitons_admin_submit'),
	    '#validate' => array('bcmlib_bib_acquisitons_admin_validate_submit'),
	);
	
	//dsm($)

	if($form_state['input']['numOfItems']){
		//dsm($form_state['input']['numOfItems']);
	} 
  return $form;
}
/**
 * Validate handler for the Import items on second page.
 */
function bcmlib_bib_acquisitons_admin_validate_submit($form, &$form_state) {
/*
  $numOfItems = $form_state['input']['numOfItems'];
  if (!$numOfItems) {
    form_set_error('numOfItems', t('Please select the number of items'));
  }
*/
}

/**
 * Submit handler for bcmlib_bib_acquisitons_admin() next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function bcmlib_bib_acquisitons_admin_submit($form, &$form_state) {



}

/**
* Implements hook_elements().
*/
function bcmlib_bib_element_info() {
  return array(
    'checkbox_bib' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('bcmlib_bib_element_process_callback'),
      '#element_validate' => array('bcmlib_bib_element_validate'),
      '#theme' => array('bcmlib_bib_element'),
      '#theme_wrappers' => array('form_element'),
    ),
  );
}
function bcmlib_bib_element_validate($form, &$form_state){
	
}
/**
* Generates form elements for my element.
*/
function bcmlib_bib_element_process_callback($element, &$form_state) {
  
  $value = is_array($element['#value']) ? $element['#value'] : array();
  $element['#type'] = 'checkboxes';
  $element['#tree'] = TRUE;
  if (count($element['#options']) > 0) {
    if (!isset($element['#default_value']) || $element['#default_value'] == 0) {
      $element['#default_value'] = array();
    }
    
    foreach ($element['#options'] as $key => $choice) {
      $class = ($column % $element['#columns']) && $column ? 'checkbox-columns' : 'checkbox-columns-clear';
      if (!isset($element[$key])) {
        $element[$key] = array('#type' => 'checkbox', '#processed' => TRUE, '#title' => $choice, '#default_value' => in_array($key, $value), '#attributes' => $element['#attributes'], '#prefix' => '<div class="' . $class . '">', '#suffix' => '</div>');
      }
      $column++;
    }
  }
  
  return $element;
}

/*
function bcmlib_bib_element_process_callback($element, $input = FALSE, &$form_state) {
	//dsm($element);
  $value = is_array($element['#value']) ? $element['#value'] : array();
  $element['#type'] = 'checkboxes';
  $element['#tree'] = TRUE;
  if (count($element['#options']) > 0) {
    if (!isset($element['#default_value']) || $element['#default_value'] == 0) {
      $element['#default_value'] = array();
    }
    
    foreach ($element['#options'] as $key => $choice) {
      $class = ($column % $element['#columns']) && $column ? 'checkbox-columns' : 'checkbox-columns-clear';
      if (!isset($element[$key])) {
        $element[$key] = array('#type' => 'checkbox', '#processed' => TRUE, '#title' => $choice, '#default_value' => in_array($key, $value), '#attributes' => $element['#attributes'], '#prefix' => '<div class="' . $class . '">', '#suffix' => '</div>');
      }
      $column++;
    }
  }
  return;
}
*/
























